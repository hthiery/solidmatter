<?php

//------------------------------------------------------------------------------
/**
* Request URI Format:
* http://<site>/rss/<type>/<tokenid>
* 
* <type> = comments|albums|mostplayed
* @package	solidMatter:sb_system
* @author	()((() [Oliver MÃ¼ller]
* @version	1.00.00
*/
//------------------------------------------------------------------------------

import('sb.handler.request.tokenbased');
import('sb.dom.rss');
import('sbJukebox:sb.pdo.queries');

//------------------------------------------------------------------------------
/**
*/
class JBRSSHandler extends TokenBasedHandler {
	
	//--------------------------------------------------------------------------
	/**
	* 
	* 
	* 
	* @param 
	* @return 
	*/
	public function fulfilRequest() {
		
		// TODO: check permissions
		
		$domFeed = $this->getRSS($this->aRequest['subject']);
		$this->refreshToken();
		$domFeed->outputXML();
		exit();
		
	}
	
	//--------------------------------------------------------------------------
	/**
	* 
	* @param 
	* @return 
	*/
	protected function getRSS($sSubject) {
		
		$nodeJukebox = $this->crSession->getRootNode()->getNode($_REQUEST->getSubject());
		
		switch ($sSubject) {
			
			case 'latestalbums':
				
				$aChannelInfo = array(
					'title' => $nodeJukebox->getProperty('label').' (latest albums)',
					'link' => 'http://'.$_REQUEST->getDomain().'/-/library',
					'description' => FALSE
				);
				$domFeed = new RSSFeed($aChannelInfo);
			
				$iLimit = 10;
				$stmtGetLatest = $this->crSession->prepareKnown('sbJukebox/jukebox/albums/getLatest');
				$stmtGetLatest->bindValue('jukebox_mpath', $nodeJukebox->getMPath(), PDO::PARAM_STR);
				$stmtGetLatest->bindValue('limit', (int) $iLimit, PDO::PARAM_INT);
				$stmtGetLatest->bindValue('nodetype', 'sbJukebox:Album', PDO::PARAM_STR);
				$stmtGetLatest->bindValue('user_uuid', $this->crSession->getRootNode()->getProperty('jcr:uuid'), PDO::PARAM_STR);
				$stmtGetLatest->execute();
				
				foreach ($stmtGetLatest as $aRow) {
					
					$nodeAlbum = $this->crSession->getNodeByIdentifier($aRow['uuid']);
					$niChildren = $nodeAlbum->getNodes();
					$sDescription = '';
					foreach ($niChildren as $nodeChild) {
						if ($nodeChild->getPrimaryNodeType() == 'sbJukebox:Track') {
							$sDescription .= $nodeChild->getProperty('label')."<br />";	
						}
					}
					
					$aItemInfo = array(
						'title' => $aRow['label'],
						'link' => 'http://'.$_REQUEST->getDomain().'/'.$aRow['uuid'],
						'description' => $sDescription,
						//'author' => 'sbJukebox',
						//'category' => FALSE,
						//'comments' => FALSE,
						//'enclosure' => FALSE,
						'guid' => $aRow['uuid'],
						'pubDate' => $aRow['created'],
						//'source' => FALSE
					);
					$domFeed->addItem($aItemInfo);
				}
				break;
				
			case 'latestcomments':
				
				$aChannelInfo = array(
					'title' => $nodeJukebox->getProperty('label').' (latest comments)',
					'link' => 'http://'.$_REQUEST->getDomain().'/-/library',
					'description' => FALSE
				);
				$domFeed = new RSSFeed($aChannelInfo);
				
				$iLimit = 10;
				$stmtGetLatest = $this->crSession->prepareKnown('sbJukebox/jukebox/comments/getLatest');
				$stmtGetLatest->bindValue('jukebox_mpath', $nodeJukebox->getMPath(), PDO::PARAM_STR);
				$stmtGetLatest->bindValue('jukebox_uuid', $nodeJukebox->getProperty('jcr:uuid'), PDO::PARAM_STR);
				$stmtGetLatest->bindValue('limit', (int) $iLimit, PDO::PARAM_INT);
				$stmtGetLatest->execute();
				
				foreach ($stmtGetLatest as $aRow) {
					
					$nodeComment = $this->crSession->getNodeByIdentifier($aRow['uuid']);
					
					$aItemInfo = array(
						'title' => $aRow['username'].': '.$aRow['item_label'],
						'link' => 'http://'.$_REQUEST->getDomain().'/'.$aRow['item_uuid'],
						'description' => $nodeComment->getProperty('comment'),
						'author' => $aRow['username'],
						//'category' => FALSE,
						//'comments' => FALSE,
						//'enclosure' => FALSE,
						'guid' => $aRow['uuid'],
						'pubDate' => $aRow['created'],
						//'source' => FALSE
					);
					$domFeed->addItem($aItemInfo);	
				}
				break;
				
			case 'mostplayed':
				throw new LazyBastardException('to be implemented');
				break;
				
			default:
				throw new sbException('unknown rss type ('.$sSubject.')');
			
		}
		
		return ($domFeed);
		
	}
	
}

?>