<?php

//------------------------------------------------------------------------------
/**
*   
*	@package solidBrickz
*	@author	()((() [Oliver MÃ¼ller]
*	@version 1.00.00
*/
//------------------------------------------------------------------------------

if (!defined('NEWDOC'))			define('NEWDOC',		190);
if (!defined('EDITDOC'))		define('EDITDOC',		191);
if (!defined('DELETEDOC'))		define('DELETEDOC',		192);
if (!defined('ADD'))			define('ADD',			193);
if (!defined('REMOVE'))			define('REMOVE',		194);
if (!defined('MOVEUP'))			define('MOVEUP',		195);
if (!defined('MOVEDOWN'))		define('MOVEDOWN',		196);
if (!defined('ALLOW'))			define('ALLOW',			197);
if (!defined('DENY'))			define('DENY',			198);
if (!defined('SETDEFAULT'))		define('SETDEFAULT',	199);
if (!defined('SETFAVORITE'))	define('SETFAVORITE',	200);
if (!defined('EMPTYDOC'))		define('EMPTYDOC',		201);
if (!defined('EDITDOCPOPUP'))	define('EDITDOCPOPUP',	202);
if (!defined('INSTALL'))		define('INSTALL',		203);
if (!defined('UNINSTALL'))		define('UNINSTALL',		204);
if (!defined('VIEW'))			define('VIEW',			205);
if (!defined('CLONEOBJECT'))	define('CLONEOBJECT',	206);
if (!defined('ACTIVATE'))		define('ACTIVATE',		207);

if (!defined('NOPOPUP'))		define('NOPOPUP',	FALSE);

//------------------------------------------------------------------------------
/**
* This function is used to create a string containing a so-called pagination for a multi-page-query or sth. similar.
* A pagination is a set of links to navigate through the various pages, e.g. to jump at start or end of a
* list, or to browse through the pages. In this case it is displayed like this:
* <code><< < 3 4 5 6 [7] 8 9 10 11 > >></code>
* where 7 is the actual page and the first/last two links browse backward/forward.
* An example for the usage of this function:
* <code>$iCurrentPage = $_GET['page'];
* $iNumEntries = $DB->Count('FROM guestbook_entries');
* $iEntriesPerPage = 30;
* $aPagination = build_pagination($iNumEntries, $iEntriesPerPage, $iCurrentPage, 'index.php?module=guestbook&action=show_entries&page=');
* echo $sPaginationHTML = $aPagination['html'];
* $sLimitClause = ' LIMIT '.aPagination['start'].','.aPagination['end'];
* $sQuery = 'SELECT * FROM guestbook_entries'.$sLimitClause;
* </code>
* The available fields in the returned array are:
* - 'html' - the HTML-code itself, ready for output.
* - 'start' - the start value, e.g. for a LIMIT-clause
* - 'end' - the end value
* - 'page' - the (possibly corrected) current page's index
* - 'maxpages' - the (possibly corrected) maximum nuber of pages
* All these are calculated on the given parameters.
* @param integer number of total entries
* @param integer number of items per page
* @param integer the current page's index, starting at 1 (incorrect values will be corrected to either 1 or the highest possible value)
* @param string the base url used to build the final links
* @param integer the 'width' of the pagination, in the example above 9, which is the default
* @return array the array containing the various infos generated by the function (see description for details)
*/
function build_pagination($iNumItems, $iItemsPerPage, $iCurrentPage, $sBaseURL, $iCutoff = 9) {
	
	$sBaseURL = mask_string($sBaseURL, HTML);
	$aPagination = NULL;
	$sPagination = gls('SYSTEM_TEXT_PAGINATION');
	
	$iMaxPages = ceil($iNumItems / $iItemsPerPage);
	
	if ($iNumItems <= 1 || $iMaxPages == 1) {
		
		$aPagination['page'] = 1;
		$aPagination['maxpages'] = 1;
		$aPagination['start'] = 0;
		$aPagination['end'] = $iItemsPerPage;
		$aPagination['browse'] = '<em>[1]</em>';
		
	} else {
		
		if ($iCurrentPage < 1) {
			$iCurrentPage = 1;
		} elseif ($iCurrentPage > $iMaxPages) {
			$iCurrentPage = $iMaxPages;
		}

		$sBrowse = '';

		$iStart		= 1;
		$iEnd		= $iMaxPages;
		$iBackward	= 0;
		$iForward	= 0;
		if ($iMaxPages > $iCutoff && $iCutoff != 0) {
			
			$iStart	= max($iCurrentPage - floor($iCutoff / 2), 1);
			$iEnd 	= min($iStart + $iCutoff - 1, $iMaxPages);
			if ($iEnd == $iMaxPages) {
				$iStart = $iEnd - $iCutoff + 1;
			}
			
			$iBackward	= $iStart - 1;
			$iForward	= $iEnd + 1;
			
			if ($iStart != 1) {
				$sBrowse .= ' <a href="'.$sBaseURL.'1'.'" title="'.gls('SYSTEM_TITLE_FIRSTPAGE').'">&lt;&lt;</a>';
				$sBrowse .= ' <a href="'.$sBaseURL.$iBackward.'" title="'.gls('SYSTEM_TITLE_XPAGESBACKWARD').'">&lt;</a>';
			}
			
		}
		for ($i = $iStart; $i <= $iEnd; $i++) {
			if ($i == $iCurrentPage) {
				$sBrowse .= ' <em>['.$i.']</em> ';
			} else {
				$sBrowse .= ' <a href="'.$sBaseURL.$i.'">'.$i.'</a>';
			}
		}
		if ($iMaxPages > $iCutoff && $iCutoff != 0) {
			if ($iEnd != $iMaxPages) {
				$sBrowse .= ' <a href="'.$sBaseURL.$iForward.'" title="'.gls('SYSTEM_TITLE_XPAGESFORWARD').'">&gt;</a>';
				$sBrowse .= ' <a href="'.$sBaseURL.$iMaxPages.'" title="'.gls('SYSTEM_TITLE_LASTPAGE').'">&gt;&gt;</a>';
			}
		}
		$aPagination['page'] = $iCurrentPage;
		$aPagination['maxpages'] = $iMaxPages;
		$aPagination['start'] = ($iCurrentPage - 1) * $iItemsPerPage;
		$aPagination['end'] = $aPagination['start'] + $iItemsPerPage;
		$aPagination['browse'] = $sBrowse;
	}
	
	$aSearch = array('<<CURRENT>>', '<<TOTAL>>', '<<BROWSE>>');
	$aReplace = array($aPagination['page'], $aPagination['maxpages'], $aPagination['browse']);
	$aPagination['html'] = str_replace($aSearch, $aReplace, $sPagination);
	
	return ($aPagination);
}

//------------------------------------------------------------------------------
/**
* Generates an icon, resp. the HTML-code of an icon along with the according link and title.
* I's intended to be used with lists fed from a database to visualize the options, that are associated
* with one list-item.
* Example:
* <code>$rsEntries = $DB->SELECT('id, title FROM guestbook_entries');
* while ($rsEntries->Next()) {
* 	$tEntry->Embed('TITLE', $rsEntries->Column('title'));
* 	$tEntry->Embed('OPTION', build_icon(EDIT, 'index.php?module=guestbook&action=edit&entry_id='.$rsEntries->Column('id'));
* }</code>
* The available type constants are the following:
* - NEWDOC - create a new item
* - EDITDOC - edit an existing item
* - DELETEDOC - delete an existing item
* - ADD - add an item
* - REMOVE - remove an item
* - MOVEUP - move an item up
* - MOVEDOWN - move an item down
* - ALLOW - allow sth.
* - DENY - deny sth.
* - SETDEFAULT - set the item as default
* - SETFAVORITE - set the item as a favorite
* - DOEMPTY - empty an item/container
* - INSTALL - install something (usually a package)
* - UNINSTALL - uninstall something (usually a package)
* - VIEW - view an item's details
* @param 
* @return 
*/
function build_icon($iType, $sURL, $sCustomTitle = '') {
	
	global $PATH_GLOBALTHEME;
	global $LOCALE;
	
	$sTitle		= '';
	$sTarget	= '';
	
	switch ($iType) {
		
	    case NEWDOC:
			$sTitle	= gls('SYSTEM_TITLE_NEW');
			$sFile	= 'doc_new.gif';
			break;
		case EDITDOC:
			$sTitle	= gls('SYSTEM_TITLE_EDIT');
			$sFile	= 'doc_edit.gif';
			break;
		case DELETEDOC:
			$sTitle	= gls('SYSTEM_TITLE_DELETE');
			$sFile	= 'doc_delete.gif';
			break;
		case ADD:
			$sTitle	= gls('SYSTEM_TITLE_ADD');
			$sFile	= 'add.gif';
			break;
		case REMOVE:
			$sTitle	= gls('SYSTEM_TITLE_REMOVE');
			$sFile	= 'remove.gif';
			break;
		case MOVEUP:
			$sTitle	= gls('SYSTEM_TITLE_MOVEUP');
			$sFile	= 'move_up.gif';
			break;
		case MOVEDOWN:
			$sTitle	= gls('SYSTEM_TITLE_MOVEDOWN');
			$sFile	= 'move_down.gif';
			break;
		case ALLOW:
			$sTitle	= gls('SYSTEM_TITLE_ALLOW');
			$sFile	= 'allow.gif';
			break;
		case DENY:
			$sTitle	= gls('SYSTEM_TITLE_DENY');
			$sFile	= 'deny.gif';
			break;
		case SETDEFAULT:
			$sTitle	= gls('SYSTEM_TITLE_SETDEFAULT');
			$sFile	= 'setdefault.gif';
			break;
		case SETFAVORITE:
			$sTitle	= gls('SYSTEM_TITLE_SETFAVORITE');
			$sFile	= 'setfavorite.gif';
			break;
		case EMPTYDOC:
			$sTitle	= gls('SYSTEM_TITLE_DOEMPTY');
			$sFile	= 'doc_empty.gif';
			break;
		case EDITDOCPOPUP:
			$sTitle	= gls('SYSTEM_TITLE_EDIT');
			$sFile	= 'doc_edit.gif';
			$sTarget = '_blank';
			break;
		case INSTALL:
			$sTitle	= gls('SYSTEM_TITLE_INSTALL');
			$sFile	= 'install.gif';
			break;
		case UNINSTALL:
			$sTitle	= gls('SYSTEM_TITLE_UNINSTALL');
			$sFile	= 'uninstall.gif';
			break;
		case VIEW:
			$sTitle	= gls('SYSTEM_TITLE_VIEW');
			$sFile	= 'view.gif';
			break;
		case CLONEOBJECT:
			$sTitle	= gls('SYSTEM_TITLE_CLONE');
			$sFile	= 'clone.gif';
			break;
		case ACTIVATE:
			$sTitle	= gls('SYSTEM_TITLE_ACTIVATE');
			$sFile	= 'activate.gif';
			break;
	}
	
	if ($sCustomTitle !== '') {
		$sTitle = $sCustomTitle;
	}
	
	$sURL	= mask_string($sURL, HTML);
	$sTitle	= mask_string($sTitle, HTML);
	
	$sHTML  = '<a href="'.$sURL.'">';
	$sHTML .= '<img src="'.$PATH_GLOBALTHEME.'/images_sysicons/'.$sFile.'"';
	$sHTML .= ' alt="'.$sTitle.'"';
	$sHTML .= ' title="'.$sTitle.'"';
	if ($sTarget !== '') {
		$sHTML .= ' target="'.$sTarget.'"';
	}
	$sHTML .= ' border="0" />';
	$sHTML .= '</a>';
	
	return ($sHTML);
	
}

//------------------------------------------------------------------------------
/**
* Builds ALL headers necessary to include it into the final page's HTML.
* It generates the keywords and description tags and aggregates the tags
* delevered from build_refresh(), build_styles() and build_jscripts.
* This function is for system-internal use and SHOULD NOT be called whatsoever!
* @return string contains ALL headers needed for completing the page for output
*/
function build_headers() {
	
	// keywords
	$sHeaders  = "\t".'<meta name="keywords" content="';
	$sHeaders .= mask_string(get_config('system', 'SITE_KEYWORDS'), HTML);
	$sHeaders .= '" />'."\r\n";
	
	// description
	$sHeaders .= "\t".'<meta name="description" content="';
	$sHeaders .= mask_string(get_config('system', 'SITE_DESCRIPTION'), HTML);
	$sHeaders .= '" />'."\r\n";
	
	$sHeaders .= build_refresh().build_styles().build_relations().build_jscripts(INCLUDES).build_jscripts(CUSTOM);
	
	return ($sHeaders);

}

//------------------------------------------------------------------------------
/**
* Builds a string which contains all needed stylesheets for including in html header.
* The token <<STYLES>> is replaced by the result of this function before output.
* The source array (global variable $STYLES) is filled automatically by the function
* call_action(), which stores all touched modules there as index.
* This function is for system-internal use and SHOULD NOT be called whatsoever!
* @return string HTML header tags for inclusion of the module's stylesheets 
*/
function build_styles() {
	global $STYLES;
	global $PATH_THEME;
	global $PRINT;
	$sStyles = '';
	foreach ($STYLES['standard'] as $sModule => $unused) {
		if ($PRINT) {
			$sStyles .= "\t".'<link rel="stylesheet" href="'.$PATH_THEME.'/'.$sModule.'/print.css" type="text/css" media="all"/>'."\r\n";
		} else {
			$sStyles .= "\t".'<link rel="stylesheet" href="'.$PATH_THEME.'/'.$sModule.'/styles.css" type="text/css" media="all"/>'."\r\n";
		}
	}
	if (isset($STYLES['additional']) && !$PRINT) {
		foreach ($STYLES['additional'] as $sStylesheet) {
			$sStyles .= "\t".'<link rel="stylesheet" href="'.$PATH_THEME.'/system/'.$sStylesheet.'" type="text/css" media="screen,projection"/>'."\r\n";
		}
	}
	return ($sStyles);
}

function build_relations() {
	global $RELATIONS;
	$sRelations = '';
	foreach ($RELATIONS as $sRelation => $aDetails) {
		$sRelations .= "\t".'<link rel="'.$sRelation.'" href="'.ms($aDetails['href'], HTML).'"';
		if ($aDetails['lang'] != NULL) {
			$sRelations .= ' lang="'.$aDetails['lang'].'"';
		}
		if ($aDetails['media'] != NULL) {
			$sRelations .= ' media="'.$aDetails['media'].'"';
		}
		if ($aDetails['title'] != NULL) {
			$sRelations .= ' title="'.$aDetails['title'].'"';
		}
		$sRelations .= ' />'."\r\n";
	}
	return ($sRelations);
	
}

//------------------------------------------------------------------------------
/**
* Builds several forms of JavaScripts for inclusion in the layout before output.
* It takes one of these options:
* INCLUDES - generates HTML-head tags for loading fixed scripts
* CUSTOM - generates the customized JScripts for use in head built by the actions
* ONLOAD - the function-calls or short scripts for use in the body's onload-attribute
* in that sequence, the layout's substituted tokens are <<JSCRIPTS>>, <<JSCRIPTS_CUSTOM>>
* and <<ONLOAD>>
* This function is for system-internal use and SHOULD NOT be called whatsoever!
* @param integer one of the three explained constants
* @return string the result ready for insertion into the layout
*/
function build_jscripts($iOption) {
	
	$sJScripts = '';
	
	switch ($iOption) {
		
		case INCLUDES:
			global $JSCRIPTS;
			if (count($JSCRIPTS != 0)) {
				$sJScripts = "\t".'<script src="modules/system/scripts_js/dhtml.js" type="text/javascript"></script>'."\r\n";
				foreach ($JSCRIPTS as $sJScript => $sModule) {
					$sJScripts .= "\t".'<script src="modules/'.$sModule.'/scripts_js/'.$sJScript.'" type="text/javascript"></script>'."\r\n";
				}
			}
			break;
		
		case CUSTOM:
			global $JSCRIPTS_CUSTOM;
			if (count($JSCRIPTS_CUSTOM) != 0) {
				$sJScripts = '<script type="text/javascript">'."\r\n".'//<![CDATA['."\r\n";
				foreach ($JSCRIPTS_CUSTOM as $sJScript) {
					$sJScripts .= $sJScript."\r\n";
				}
				$sJScripts .= '//]]>'."\r\n".'</script>'."\r\n";
			}
			break;
			
		case ONLOAD:
			global $JSCRIPTS_ONLOAD;
			foreach ($JSCRIPTS_ONLOAD as $sJScript) {
				$sJScripts .= $sJScript;
			}
			break;
	}
	
	return ($sJScripts);
}

//------------------------------------------------------------------------------
/**
* Builds a meta-tag for reloading or forwarding to another page.
* The information to build the tag is taken from the global variable $REFRESH,
* whereas the numeric index is interpreted the seconds until reload, and the value
* as the URL to load after that time. The result substitutes the token <<RELOAD>>
* in the layout.
* This function is for system-internal use and SHOULD NOT be called whatsoever!
* @return string the resulting meta-tag ready for insertion into the layout
*/
function build_refresh() {
	global $REFRESH;
	if ($REFRESH == NULL) {
		return ('');
	}
	foreach ($REFRESH as $iTime => $sURL) {
		return ('<meta http-equiv="refresh" content="'.$iTime.'; URL='.mask_string($sURL, HTML).'" />');
	}
}

//------------------------------------------------------------------------------
/**
* Builds the ready-to-use HTML-code of a checkmark.
* This function is used for masking a string via mask_string().
* @return the HTML-code of an image for the checkmark
*/
function build_checkmark() {
	global $PATH_GLOBALTHEME;
	
	$sHTML  = '<img src="'.$PATH_GLOBALTHEME.'/images_sysicons/checkmark.gif"';
	$sHTML .= ' alt="Checkmark"';
	$sHTML .= ' border="0" />';
	
	return ($sHTML);
}


//------------------------------------------------------------------------------
/**
* Builds the navigation bar for inserting in the Layout resp. as pagetitle.
* This function is called automatically just before output of the final page and it's
* result then replaces the token <<NAVIGATION>>, a 'flat' version (without tags)
* is used for replacing the token <<PAGETITLE>>.
* @param integer specifies the style of the Navigation. FULL generates a navigation bar with Links, FLAT without. Navigation items without according URL are always rendered FLAT.
* @param integer when only a portion of the navigation is needed, one can specify the first level here. Default is 0, which is top-level.
* @param integer when only a portion of the navigation is needed, one can specify the last level here. Default is 0, which means process all since starting level.
* @return string the result, either a combination of links, flat text or both, seperated by ' : '.
*/
function build_navigation($iStyle = FULL, $iStart = 0, $iEnd = 0) {
	global $NAVIGATION;
	$sNavigation = '';
	
	ksort($NAVIGATION);
	reset($NAVIGATION);
	$iCount = count($NAVIGATION) - 1;
	if ($iEnd == 0) {
		$iEnd = $iCount;
	}
	for ($i = $iStart; $i <= $iEnd; $i++) {
		if ($iStyle == FULL && $NAVIGATION[$i]['url'] != NULL) {
			$sNavigation .= '<a href="'.mask_string($NAVIGATION[$i]['url'], HTML).'">';
			$sNavigation .= mask_string($NAVIGATION[$i]['title'], HTML).'</a>';
		} else {
			$sNavigation .= mask_string($NAVIGATION[$i]['title'], HTML);
		}
		if ($i != $iEnd) {
			$sNavigation .= ' '.mask_string(get_config('system', 'NAVIGATION_SEPARATOR'), HTML).' ';
		}
	}

	return ($sNavigation);
}

//------------------------------------------------------------------------------
/**
* Generates HTML-Code to display an online-help-item.
* Serves to harmonize the appearance of these items. It can deliver code for
* small (popup) infos describing a single inputfield's meaning or page-level
* infos that are supposed to appear on top of a page.
* @param string the help-text to be displayed
* @param boolean generate popup-code (TRUE) or page-level-code (FALSE)
* @return string the HTML that can be inserted to the page directly
*/
function build_helpitem($sHelpText, $bPopup = TRUE) {
	
	global $PATH_GLOBALTHEME;
	
	if ($bPopup) {
	
		add_jscript(INCLUDES, 'overlib/overlib_mini.js', 'system');
		
		$sHelpText = mask_string($sHelpText, HTML|BR|EMPS);
		$sHelpText = str_replace("\n", '', $sHelpText);
		$sHelpText = str_replace("\r", '', $sHelpText);
		
		$sHTML  = '<img class="help" src="'.$PATH_GLOBALTHEME.'/images/help.gif" alt="" border="0" onmouseover="return overlib(\'';
		$sHTML .= mask_string($sHelpText, HTML);
		//$sHTML .= $sHelpText;
		$sHTML .= '\', WIDTH, 400, HAUTO, VAUTO, FGCOLOR, \'#EEEE44\');" onmouseout="return nd();" />';
		
	} else {
		
		$sHTML  = '<img src="'.$PATH_GLOBALTHEME.'/images/help.gif" alt="'.gls('SYSTEM_TITLE_HELP').'" border="0" /> ';
		$sHTML .= mask_string($sHelpText, HTML|BR|EMPS).'<br />';
		
	}
	
	return ($sHTML);
	
}

?>